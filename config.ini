[Mnist]
file = './data'
training_size = 600
testing_size = 100

learning_iterations = 1
test_period = 10
randomize_learning_set = True

activation_funs = [Sigmoid(0.1), Sigmoid(0.1), Sigmoid(0.1)]
error_fun = Norm2()
network_layers = [784, 10, 30, 10]

eta = 0.2

training_fun = MnistTest
testing_fun = MnistTest
SaveFolder = 'Mnist'

[GanMnist]
file = './data'  # Fichier sources des chiffres MNIST

numbers_to_draw = [5] # Liste des nombres que l'on veut générer
 
disc_learning_ratio = 1 # Ratio d'apprentissage du discriminateur avec une image de la base MNIST
disc_fake_learning_ratio = 0 # Ratio d'apprentissage du discriminateur avec une image issu du générateur

disc_activation_funs = [Sigmoid(0.1), Sigmoid(0.1), Sigmoid(0.1)] # fonction d'activation des couches du discriminateur
disc_error_fun = CostFunction() # Fonction d'erreur du discriminateur pour l'apprentissage du discriminateur
disc_network_layers = [784, 10, 1] # taille des couches 

eta_disc = 0.5 # pas d'apprentissage pour le discriminateur

training_fun = MnistGanTest # fonction de réponse pour l'apprentissage 



generator_network_layers = [100, 784] # Taille des couches 
noise_layers_size = [0, 0, 0]  # taille du bruit ajouté sur 
generator_activation_funs = [Sigmoid(0.1), Sigmoid(0.1), Sigmoid(0.1)] # fonction d'activation des couches du generateur

gen_learning_ratio = 1 # Ratio d'apprentissage du générateur avec discriminateur
gen_learning_ratio_alone = 0 # Ratio d'apprentissage du générateur seul
eta_gen = 0.5 # pas d'apprentissage pour le générateur


nb_images_during_learning = 1 # Nombre d'images exportés au cours de l'apprentissage
final_images = 10 # Nombre d'images exportés après l'apprentissage (donc avec n bruits pour le même réseau)

play_number = 400000 # Nombre de parties

save_folder = 'GanMnist' # Dossier de sauvegarde des courbes D(x) et D(G(z))
test_period = 100000 # Période des tests pour obtenir les courbes (attention petit nombre ralentit le process)
lissage_test = 1 # Nombre de test pour une série (attention c'est n compute du générateur de 2n compute du discrimateur) 
