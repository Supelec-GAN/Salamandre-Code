[Mnist]
file = './data'
dataset = 'mnist'

# Paramètres d'apprentissage (pour l'engine notamment)
training_size = 10000
randomize_learning_set = True
learning_set_pass_nb = 1
nb_exp = 1
batch_size = 1
training_fun = MnistTest

# Paramètres de test
testing_size = 1000
test_period = 1000
testing_fun = MnistTest

# Configuration du réseau
network = [{'type': 'N',
           'activation_function': 'Sigmoid(0.1)',
           'input_size': 784,
           'output_size': 300,
           'noise_size': 0},

           {'type': 'N',
           'activation_function': 'Sigmoid(0.1)',
           'input_size': 300,
           'output_size': 10,
           'noise_size': 0}]

error_fun = Norm2()
eta = 0.2
momentum = 0

# Traitement des données
SaveFolder = 'Mnist'

[GanMnist]

number_exp = [2]

file = ['./data']
dataset = ['mnist']

numbers_to_draw = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]

disc_learning_ratio = [10]
disc_fake_learning_ratio = [0]

disc_network_layers = [[{'type': 'N',
                         'activation_function': 'Sigmoid(0.1)',
                         'input_size': 784,
                         'output_size': 20,
                         'noise_size': 0},

                        {'type': 'N',
                         'activation_function': 'Sigmoid(0.1)',
                         'input_size': 20,
                         'output_size': 1,
                         'noise_size': 0}]]

disc_error_fun = [CostFunction()]

training_fun = [MnistGanTest()]

generator_network_layers = [[{'type': 'N',
                              'activation_function': 'Sigmoid(0.1)',
                              'input_size': 100,
                              'output_size': 300,
                              'noise_size': 0},

                              {'type': 'N',
                              'activation_function': 'Sigmoid(0.1)',
                              'input_size': 300,
                              'output_size': 784,
                              'noise_size': 0}]]

gen_error_fun = [NonSatHeuristic()]

gen_learning_ratio = [10]
gen_learning_ratio_alone = [0]

nb_images_during_learning = [50]
nb_images_par_sortie_during_learning = [20]
final_images = [20]

play_number = [100000]

save_folder = ['ratio_10_10' + i for i in ['1', '2', '0_05', '0_1', '0_2', '0_5', '1', '2', '5', '10']]
test_period = [1000]

lissage_test = [10]

batch_size = [1]